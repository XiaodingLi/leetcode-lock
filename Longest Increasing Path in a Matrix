public class Solution {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Solution  s = new Solution ();
		int[][] matrix =  {  {9,9,4},  {6,6,8},  {2,1,1}};
		System.out.println(s.longestIncreasingPath(matrix));
	}
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
            return 0;
        }
        int[][] dp = new int[matrix.length][matrix[0].length];
        int max = 1;
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[0].length; j++) {
                int length = help(i, j, matrix, dp, Integer.MAX_VALUE);
                max = Math.max(length, max);
            }
        }
        return max;
    }
    private int help(int i, int j, int[][] matrix, int[][] dp, int pre) {
        // if out of bond OR current cell value larger than previous cell value.
        if (i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length || matrix[i][j] >= pre) {
            return 0;
        }
        // if calculated before, no need to do it again
        if (dp[i][j] > 0) {
            return dp[i][j];
        }   
        
        int cur = matrix[i][j];
        int tempMax = 0;
        tempMax = Math.max(help(i - 1, j, matrix, dp, cur), tempMax);
        tempMax = Math.max(help(i + 1, j, matrix, dp, cur), tempMax);
        tempMax = Math.max(help(i, j - 1, matrix, dp, cur), tempMax);
        tempMax = Math.max(help(i, j + 1, matrix, dp, cur), tempMax);
        tempMax++;
        dp[i][j] = tempMax;
        return tempMax;
         
    }
}
