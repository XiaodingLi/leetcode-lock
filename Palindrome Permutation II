public class Solution {
    public List<String> generatePalindromes(String s) {
        List<String> rst = new ArrayList<>();
        if (s == null || s.length() == 0){
            return rst;
        }
        
        Map<Character, Integer> map = new HashMap<>();
        int odd = 0;
        for (int i = 0; i < s.length(); i++){
            char c = s.charAt(i);
            int amount = map.getOrDefault(c, 0);
            map.put(c, amount + 1);
            odd += (map.get(c) % 2 == 1)? 1: -1;
        }
        if (odd > 1){
            return rst;
        }
        // abb  char m 
        String mid = "";
        List<Character> chars = new ArrayList<>();
        for (Map.Entry<Character, Integer> entry : map.entrySet()){
            char key = entry.getKey();
            int val = entry.getValue();
            if (val % 2 != 0){
                mid += key;
            }
            for (int i = 0; i < val / 2; i++){
            	chars.add(key);
            }
        }
        dfs(rst, new StringBuilder(), chars, mid, new boolean[chars.size()]);
        
        return rst;
    }
    void dfs (List<String> rst, StringBuilder item, List<Character> inputChars, String mid, boolean[] visited ){
        if (item.length() == inputChars.size()){
            rst.add(item.toString() + mid + item.reverse().toString());
            item.reverse();
            return;
        }
        for (int i = 0; i < inputChars.size(); i++){
            if (i != 0 && inputChars.get(i) == inputChars.get(i - 1) && !visited[i - 1]){
                continue;
            }
            if (!visited[i]){
                visited[i] = true;
                item.append(inputChars.get(i));
                dfs ( rst, item, inputChars, mid, visited);
                item.deleteCharAt(item.length() - 1);
                visited[i] = false;
            }
        }
    }
}
