/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    class Node{
        TreeNode node;
        int col;
        public Node(TreeNode node, int col){
            this.node = node;
            this.col = col;
        }
    }
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> rst = new ArrayList<>();
        if (root == null){
            return rst;
        }
        Map<Integer, List<Integer>> map = new HashMap<>();
        int min = 0;
        int max = 0;
        Queue<Node> q = new LinkedList<>();
        q.offer(new Node(root, 0));
        while(!q.isEmpty()){
            Node temp = q.poll();
            TreeNode node = temp.node;
            int col = temp.col;
            if (!map.containsKey(col)){
                map.put(col, new ArrayList<>());
            }
            map.get(col).add(node.val);
            
            if (node.left != null){
                q.offer(new Node(node.left, col - 1));
                min = Math.min(min, col - 1);
            }
            if (node.right != null){
                q.offer(new Node(node.right, col + 1));
                max = Math.max(max, col + 1);
            }
        }
        for (int i = min; i <= max; i++){
            rst.add(map.get(i));
        }
        return rst;
    }
}
